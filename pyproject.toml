[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "my-python-project"
version = "0.1.0"
description = "A Python project with modern tooling and best practices"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
maintainers = [
    {name = "Your Name", email = "your.email@example.com"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]
keywords = ["python", "data-processing", "analysis"]
requires-python = ">=3.8"

# Core dependencies
dependencies = [
    "numpy>=1.21.0",
    "pandas>=1.3.0",
    "matplotlib>=3.5.0",
    "scipy>=1.7.0",
]

# Optional dependencies for different use cases
[project.optional-dependencies]
dev = [
    "black>=22.0.0",
    "flake8>=4.0.0",
    "isort>=5.10.0",
    "mypy>=0.991",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pre-commit>=2.20.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.8.0",
    "hypothesis>=6.0.0",
]
docs = [
    "sphinx>=4.5.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
]
plotting = [
    "seaborn>=0.11.0",
    "plotly>=5.0.0",
    "bokeh>=2.4.0",
]
data = [
    "h5py>=3.7.0",
    "openpyxl>=3.0.0",
    "xlsxwriter>=3.0.0",
    "requests>=2.28.0",
]
ml = [
    "scikit-learn>=1.1.0",
    "tensorflow>=2.9.0",
    "torch>=1.12.0",
]
all = [
    "my-python-project[dev,test,docs,plotting,data,ml]"
]

[project.urls]
Homepage = "https://github.com/yourusername/my-python-project"
Documentation = "https://my-python-project.readthedocs.io"
Repository = "https://github.com/yourusername/my-python-project.git"
Issues = "https://github.com/yourusername/my-python-project/issues"
Changelog = "https://github.com/yourusername/my-python-project/blob/main/CHANGELOG.md"

# Entry points for command-line scripts
[project.scripts]
my-project = "my_package.main:main"
my-project-cli = "my_package.cli:main"

# Configure setuptools
[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"my_package" = ["data/*.csv", "data/*.json", "config/*.yaml"]

# Black code formatter configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    # directories
    \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | build
    | dist
)/
'''

# isort import sorter configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "venv/*",
    ".venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# MyPy type checker configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = [
    "matplotlib.*",
    "scipy.*",
    "pandas.*",
    "numpy.*",
]
ignore_missing_imports = true

# Flake8 linter configuration (in setup.cfg or .flake8 file)
# Note: flake8 doesn't support pyproject.toml yet, so you'll need a separate .flake8 file:
# [flake8]
# max-line-length = 88
# extend-ignore = E203, W503
# exclude = .git,__pycache__,docs/source/conf.py,old,build,dist,.venv,venv

# Bandit security linter configuration
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101"]  # Skip assert_used test

# Pre-commit hook configuration (create .pre-commit-config.yaml separately)

# Pyright type checker (alternative to mypy)
[tool.pyright]
include = ["src"]
exclude = ["**/node_modules",
    "**/__pycache__",
    ".venv",
    "venv"
]
venv = ".venv"
venvPath = "."

reportMissingImports = true
reportMissingTypeStubs = false

pythonVersion = "3.8"
pythonPlatform = "Linux"

# Ruff linter (modern alternative to flake8)
[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["S101"]

[tool.ruff.isort]
known-first-party = ["my_package"]

# Vulture (finds unused code)
[tool.vulture]
paths = ["src", "tests"]
min_confidence = 80